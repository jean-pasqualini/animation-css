// https://codepen.io/jkantner/pen/jOONyoO
/**
OLD VALUES                    NEW VALUES 
Hex: #4f2017 ------------------> #2F819D;
RGB: rgb(79, 32, 23) ----------> rgb(47, 129, 157);
HSL: hsl(195, 53.3%, 79%) -----> hsl(195, 53.3%, 50%);

Unit	Description
cm	centimeters
mm	millimeters
in	inches (1in = 96px = 2.54cm)
px *	pixels (1px = 1/96th of 1in)
pt	points (1pt = 1/72 of 1in)
pc	picas (1pc = 12 pt)

em	Relative to the font-size of the element (2em means 2 times the size of the current font)	
ex	Relative to the x-height of the current font (rarely used)	
ch	Relative to the width of the "0" (zero)	
rem	Relative to font-size of the root element	
vw	Relative to 1% of the width of the viewport*	
vh	Relative to 1% of the height of the viewport*	
vmin	Relative to 1% of viewport's* smaller dimension	
vmax	Relative to 1% of viewport's* larger dimension	
%	Relative to the parent element
**/

/**
positonnement au mieu horizontal et vertical

position: absolute + top and left 50 %
and transform: translate(-50%, -50%)

or

position: absolute + top, left, right, bottom 0 and margin auto
*/

// colors
$angleSpan: 40deg;
$dur: 2s;
$delayInc: calc($dur / 100);
$segments: 30;
$timing: cubic-bezier(0.6,0,0.4,1);
$playState: running; //running;
// colors
$w1: hsl(0,0%,100%);
$w1T: hsla(0,0%,100%,0);
$w2: hsl(0,0%,90%);
$w2T: hsla(0,0%,90%,0);
$w3: hsl(0,0%,80%);
$w3T: hsla(0,0%,80%,0);
$bk: hsl(0,0%,10%);
$bkT: hsla(0,0%,10%,0);
$pk: hsl(0,60%,75%);
$pkT: hsla(0,60%,75%,0);

* {
	border: 0;
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
    background-color: hsl(210,38%,28%);
    color: hsl(210, 100%, 100%);
    font-size: calc(16px + 1vw);
    border: solid red 2px;
    line-height: 1.5;
    display: flex;
	height: 100vh;
}

.cat {
	margin: auto;
	position: relative;
	width: 16em;
	height: 16em;

    &__segment {
		position: absolute;
		top: 0;
		left: 0;
        right: 0;
        bottom: 0;
        margin: auto;
		width: 3em;
		height: 2em;
		//transform: translate(-50%,-50%);
        &:before {
			animation: loop $dur $timing infinite $playState;
			background: linear-gradient(90deg,$w1 20%,$w2 20% 80%,$w1 80%);
			border-radius: 0.25em;
			content: "";
			display: block;
			will-change: transform;
			width: 100%;
			height: 100%;
        }
        // head
        &:first-of-type {
            width: 4em;
			height: 4em;
			z-index: 1;
            &:before {
                background:
					// eyes
					radial-gradient(0.25em 0.25em at 1.25em 1.6em,$w1 48%,$w1T 50%),
					radial-gradient(0.75em 0.75em at 1.25em 1.75em,$bk 48%,$bkT 50%),
					radial-gradient(0.25em 0.25em at 2.75em 1.6em,$w1 48%,$w1T 50%),
					radial-gradient(0.75em 0.75em at 2.75em 1.75em,$bk 48%,$bkT 50%),
					// mouth
					radial-gradient(0.9em 0.8em at 1.5em 2.65em,$w1 48%,$w1T 50%),
					radial-gradient(0.9em 0.8em at 2.5em 2.65em,$w1 48%,$w1T 50%),
					radial-gradient(1em 0.8em at 1.6em 2.75em,$w3 48%,$w3T 50%),
					radial-gradient(1em 0.8em at 2.4em 2.75em,$w3 48%,$w3T 50%),
					// nose
					radial-gradient(0.75em 0.75em at 50% 2.5em,$pk 48%,$pkT 50%),
					// head
					radial-gradient(4em 3em at 50% 2em,$w1 48%,$w1T 50%),
					radial-gradient(4em 3em at 50% 2.2em,$w3 48%,$w3T 50%),
					// ears
					radial-gradient(1em 3em at 0.75em 1.5em,$pk 39%,$w1 40% 49%,$w1T 50%),
					radial-gradient(1em 3em at 3.25em 1.5em,$pk 39%,$w1 40% 49%,$w1T 50%),
					// paws
					radial-gradient(1em 2em at 0.5em 2.8em,$w1 48%,$w1T 50%),
					radial-gradient(1em 2em at 0.5em 3em,$w3 48%,$w3T 50%),
					radial-gradient(1em 2em at 3.5em 2.8em,$w1 48%,$w1T 50%),
					radial-gradient(1em 2em at 3.5em 3em,$w3 48%,$w3T 50%);
				background-repeat: no-repeat;
            }
        }
        // legs
        &:last-of-type {
            width: 3em;
            height: 4em;
            &:before {
                background:
                    linear-gradient(90deg,$w1 20%,$w2 20% 80%,$w1 80%) 0 1.5em / 3em 0.5em,
                    radial-gradient(3em 2em at top center,$w2 30%,$w1 31% 48%,$w1T 50%) 0 2em /  3em 2em,
                    radial-gradient(1em 4em at 0.5em 0,$w1 48%,$w1T 50%) 0 2em / 3em 2em,
                    radial-gradient(1em 4em at 2.5em 0,$w1 48%,$w1T 50%) 0 2em / 3em 2em
                ;
                background-repeat: no-repeat;
            }
        }

        $negAngleSpan: -$angleSpan;
        $negAngleHalf: calc($negAngleSpan / 2);
        $angleInc: calc($angleSpan / $segments);
        @for $segment from 1 through 30 {
            $rotateBy: $angleInc * ($segment - 1);
            &:nth-of-type(#{$segment}) {
                transform: rotate($negAngleHalf + $rotateBy);
            }

            &:nth-of-type(#{$segment}):before {
                animation-delay: $delayInc * ($segment - 1);
                transform: translateX(6em);
            }
        }
    }
}

@keyframes loop {
    from {
        transform: rotate(0) translateX(6em);
    }
    to {
        transform: rotate(-1turn) translateX(6em);
    }
}